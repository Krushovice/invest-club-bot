import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery, ChatMemberUpdated, ChatJoinRequest

from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.exc import SQLAlchemyError

from app.keyboards.chat_kb import ChatCbData, ChatActions
from app.core.config import settings

from app.core.database import UserCRUD

from app.core.logging import setup_logger

router = Router(name=__name__)
logger = setup_logger(__name__)


@router.callback_query(ChatCbData.filter(F.action == ChatActions.join))
async def handle_new_member(call: CallbackQuery):
    await call.answer()


@router.chat_join_request(F.chat.id == int(settings.main.channel_id))
async def handle_join_request(event: ChatJoinRequest):
    user_id = event.from_user.id

    try:
        user = await UserCRUD.get_user_by_tg_id(user_id)
        bot = event.bot
        if user and user.is_active:
            await event.approve()
            await bot.send_message(
                chat_id=user_id,
                text=(
                    "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ–¥–æ–±—Ä–µ–Ω! "
                    "–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥: <b>https://t.me/+FJ3Xv4Lu5EM2ZGUy</b>"
                ),
            )

        else:
            await event.decline()
            await bot.send_message(
                chat_id=user_id,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. "
                "–í–∏–¥–∏–º–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π üòï",
            )

    except TelegramBadRequest as e:
        logger.error(e)

    except SQLAlchemyError as e:
        logger.error(e)

    except Exception as e:
        logger.error(e)


@router.chat_member()
async def on_user_join(event: ChatMemberUpdated):
    # if (
    #     event.chat.id == int(settings.main.channel_id)
    #     and event.new_chat_member.status == "member"
    # ):
    #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    #     await event.bot.send_message(
    #         event.from_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
    #         "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª!",
    #     )
    pass


@router.chat_member()
async def on_user_join_or_leave(event: ChatMemberUpdated):
    user = event.from_user
    chat_id = event.chat.id
    status = event.new_chat_member.status

    if status == "member":  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
        await event.bot.send_message(
            chat_id, f"{user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(–ª–∞—Å—å) –∫ –∫–∞–Ω–∞–ª—É!"
        )
    elif status == "left":  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª
        await event.bot.send_message(chat_id, f"{user.full_name} –ø–æ–∫–∏–Ω—É–ª(–∞) –∫–∞–Ω–∞–ª.")
    elif status == "kicked":  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∫–∏–∫–Ω—É—Ç
        await event.bot.send_message(
            chat_id, f"{user.full_name} –±—ã–ª(–∞) –∏—Å–∫–ª—é—á—ë–Ω(–∞) –∏–∑ –∫–∞–Ω–∞–ª–∞."
        )
