import logging

import datetime

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import FSInputFile, Message

from aiohttp import web
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from sqlalchemy.exc import SQLAlchemyError

from app.core.config import settings

from app.core.database import UserSchema, UserCRUD

from app.keyboards import build_chat_kb


from app.core import User
from app.core.database import PaymentCRUD, PaymentSchema, UserUpdateSchema

from app.payment import parse_user_id_from_order_id

from app.core.logging import setup_logger

image_path = "app/utils/images/image3.JPEG"
ban_image_path = "app/utils/images/ban_image.png"
logger = setup_logger(__name__)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
async def handle_payment_notification(request, bot: Bot):
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["Success", "PaymentId", "Status", "OrderId"]
        if not all(key in data for key in required_fields):
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return web.json_response(
                {"status": "missing required fields"},
                status=400,
            )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = data["Status"]
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
        count = 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        if status == "CONFIRMED" and count == 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = await save_user_payment(
                payment_id=data["PaymentId"],
                order_id=data["OrderId"],
            )

            if user_id:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await UserCRUD.get_user(user_id=user_id)
                if not user:
                    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return web.json_response(
                        {"status": "error", "message": "user not found"},
                        status=404,
                    )

                chat_member = user.chat_member is True
                invite_link = settings.main.channel_link

                if chat_member:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ, —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º
                    await unban_old_user(
                        bot=bot,
                        channel_id=int(settings.main.channel_id),
                        user_id=user.tg_id,
                    )
                else:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
                    await bot.send_photo(
                        chat_id=user.tg_id,
                        photo=FSInputFile(image_path),
                        caption="–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –Ω–∏–∂–µ:",
                        reply_markup=build_chat_kb(invite_link=invite_link),
                    )

                return web.json_response({"status": "ok"})
            else:
                logger.warning("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return web.json_response(
                    {"status": "ok", "text": "–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"}
                )

        # –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")
        return web.json_response({"status": "unhandled status"})

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        return web.json_response({"status": "error"}, status=500)


async def save_user_payment(payment_id: int, order_id: str):

    existing_payment = await PaymentCRUD.get_payment(payment_id)

    if existing_payment:
        return None

    else:
        user_id = parse_user_id_from_order_id(order_id)

        try:
            user = await UserCRUD.get_user(user_id=user_id)
            today = datetime.date.today()
            expired_date = today + datetime.timedelta(days=31)
            updated_user = UserUpdateSchema(
                tg_id=user.tg_id,
                is_active=True,
                chat_member=True,
                expired_at=expired_date,
            )
            await UserCRUD.update_user(
                user_id=user.id,
                user=updated_user,
            )

            pay_in = PaymentSchema(
                pay_id=payment_id,
                user_id=user_id,
            )
            await PaymentCRUD.create_payment(payment=pay_in)
            return user.id

        except SQLAlchemyError as e:
            logger.error(e)

        except Exception as e:
            logger.error(e)


async def register_user(message: Message):
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    tg_id = message.from_user.id
    user_data = UserSchema(
        tg_id=tg_id,
        first_name=first_name,
        last_name=last_name,
        username=username,
    )
    try:
        user = await UserCRUD.get_user_by_tg_id(tg_id)
        if not user:
            user = await UserCRUD.create_user(user=user_data)
        return user

    except SQLAlchemyError as e:
        logger.error(e)

    except Exception as e:
        logger.error(e)


async def check_user_subs(bot: Bot):
    users = await UserCRUD.get_users()
    for user in users:
        active = await get_user_subscribe(user)
        if not active:
            try:
                await bot.ban_chat_member(
                    chat_id=int(settings.main.channel_id),
                    user_id=user.tg_id,
                    revoke_messages=True,
                )
                await bot.send_photo(
                    chat_id=user.tg_id,
                    photo=FSInputFile(path=ban_image_path),
                    caption=f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å {user.expired_at}. "
                    f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ—Å—Ç—É–ø <b>/pay</b> üí∞",
                )
            except TelegramBadRequest as e:
                logger.error(e)

            except Exception as e:
                logger.error(e)


async def reminder_subscribe(bot: Bot):
    users = await UserCRUD.get_users()

    today = datetime.date.today()
    for user in users:
        txt = (
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è {user.expired_at} –∏ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. "
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ –æ–ø–ª–∞—Ç—É ‚úçÔ∏è /pay"
        )
        if user.is_active:
            delta_days = (user.expired_at - today).days
            if 0 < delta_days < 3:
                await bot.send_message(
                    chat_id=user.tg_id,
                    text=txt,
                )


def schedule_tasks(bot: Bot):
    scheduler = AsyncIOScheduler(timezone="Asia/Vladivostok")

    scheduler.add_job(
        check_user_subs,
        trigger="cron",
        hour=datetime.datetime.now().hour,
        minute=datetime.datetime.now().minute + 1,
        start_date=datetime.datetime.now(),
        kwargs={"bot": bot},
        id="check_user_subs",
        replace_existing=True,
    )
    scheduler.add_job(
        reminder_subscribe,
        trigger="cron",
        hour=datetime.datetime.now().hour,
        minute=datetime.datetime.now().minute + 1,
        start_date=datetime.datetime.now(),
        kwargs={"bot": bot},
        id="reminder_subscribe",
        replace_existing=True,
    )

    scheduler.start()


async def get_user_subscribe(user: User):
    today = datetime.date.today()
    if user.is_active:
        if user.expired_at < today:
            try:
                user_in = UserUpdateSchema(
                    tg_id=user.tg_id,
                    is_active=False,
                    chat_member=False,
                )
                await UserCRUD.update_user(user_id=user.id, user=user_in)
                return False
            except SQLAlchemyError as e:
                logger.error(e)

            except Exception as e:
                logger.error(e)
        else:
            return True


async def unban_old_user(
    bot: Bot,
    channel_id: int,
    user_id: int,
):
    try:
        # –°–Ω–∏–º–∞–µ–º –±–∞–Ω
        status = await bot.unban_chat_member(
            chat_id=channel_id,
            user_id=user_id,
            only_if_banned=True,
        )
        invite_link = settings.main.channel_link
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞
        member_after = await bot.get_chat_member(
            chat_id=channel_id,
            user_id=user_id,
        )
        if status and member_after.status == "left":
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω!")
            await bot.send_photo(
                chat_id=user_id,
                photo=FSInputFile(image_path),
                caption=f"–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ö–∞–Ω–∞–ª: {invite_link}",
            )
            return web.json_response({"status": "ok"})

        else:
            print("–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ")
            return False

    except TelegramBadRequest as e:
        logger.error(e)

    except Exception as e:
        logger.error(e)
