import logging
import functools
import asyncio
import datetime

from aiogram import Bot
from aiogram.types import FSInputFile, Message

from aiohttp import web

from app.core.config import settings

from app.core.database import UserSchema, UserCRUD

from app.keyboards import build_chat_kb
from core.database import PaymentCRUD

image_path = "app/utils/images/image3.JPEG"
ban_image_path = "app/utils/images/ban_image.png"


def async_repeat(interval):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
    """

    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            while True:
                await func(*args, **kwargs)
                await asyncio.sleep(interval)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

        return wrapper

    return decorator


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
async def handle_payment_notification(request, bot: Bot):
    try:

        logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {await request.text()}")

        data = await request.json()

        logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ JSON —É—Å–ø–µ—à–µ–Ω: {data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not all(
            key in data for key in ["Success", "PaymentId", "Status", "OrderId"]
        ):
            logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return web.json_response({"status": "missing required fields"}, status=400)

        status = data["Status"]
        # –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω –∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –±–¥
        if status == "CONFIRMED":
            payment = await save_user_payment(payment_id=data["PaymentId"])
            logging.info(f"–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {data}")
            if payment:
                invite_link = await work_with_chat_member(payment=payment, bot=bot)
                await bot.send_photo(
                    chat_id=payment.user.tg_id,
                    photo=FSInputFile(image_path),
                    caption="–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –Ω–∏–∂–µ",
                    reply_markup=build_chat_kb(invite_link=invite_link),
                )
                return web.json_response({"status": "ok"})
            else:
                logging.info(f"–ü–ª–∞—Ç–µ–∂ {data["PaymentId"]} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return web.json_response(
                    {"status": "ok", "text": "–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"}
                )
        else:
            logging.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")
            return web.json_response({"status": "unhandled status"})

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        return web.json_response({"status": "error"}, status=500)


async def save_user_payment(payment_id: int):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–≤–µ—Ä—Ö
    check_for_exist = await PaymentCRUD.get_payment_by_pay_id(payment_id)

    if check_for_exist:
        return None

    payment = await PaymentCRUD.create_payment(payment_id=payment_id)
    return payment


async def work_with_chat_member(payment, bot: Bot):
    if payment.user.payments:
        await bot.unban_chat_member(
            chat_id=settings.main.channel_id,
            user_id=payment.user.tg_id,
            only_if_banned=True,
        )
    else:
        chat_link = await bot.create_chat_invite_link(
            chat_id=settings.main.channel_id,
            name=f"–ò–Ω–≤–∞–π—Ç —Å—Å–ª—ã–∫–∞ —é–∑–µ—Ä–∞: {payment.user.tg_id}",
        )
        return chat_link.invite_link


async def register_user(message: Message):
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    tg_id = message.from_user.id
    user_data = UserSchema(
        tg_id=tg_id,
        first_name=first_name,
        last_name=last_name,
    )
    user_exist = await UserCRUD.get_user_by_tg_id(tg_id)
    if not user_exist:
        user = await UserCRUD.create_user(user=user_data)
        return user
    return user_exist


@async_repeat(interval=24 * 3600)
async def check_user_subs(bot: Bot):
    users = await UserCRUD.get_users()
    today = datetime.date.today()
    for user in users:
        if user.expired_at < today and not user.is_active:
            await bot.ban_chat_member(
                chat_id=settings.main.channel_id,
                user_id=user.tg_id,
                revoke_messages=True,
            )
            await bot.send_photo(
                chat_id=user.tg_id,
                photo=FSInputFile(path=ban_image_path),
                caption=f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å {user.expired_at}. "
                f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ—Å—Ç—É–ø /pay üí∞",
            )
